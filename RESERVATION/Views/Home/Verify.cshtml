@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Verify";
    var price = ViewData["price"];
}
@model RESERVATION.Models.T_RESERVATION
<div id="calendar">
    <div class="back">
        <form id="payment-form">
        <div id="payment-element">
            <!--Stripe.js injects the Payment Element-->
        </div>
            <button id="submit">
            <div class="spinner hidden" id="spinner"></div>
            <span id="button-text">決済</span>
        </button>
        <div id="payment-message" class="hidden"></div>
    </form>
    <form asp-action="Privacy" id="submitbtn">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="date" value='@ViewData["date"]' />
            <input type="hidden" asp-for="coursem_id" value='@ViewData["coursem_id"]' />
            <input type="hidden" asp-for="cource_id" value='@ViewData["cource_id"]' />
            <input type="hidden" asp-for="option_id" value='@ViewData["option_id"]' />
            <input type="hidden" asp-for="price" value='@ViewData["price"]' />
            <input type="hidden" asp-for="username" value='@ViewData["username"]' />
            <input type="hidden" asp-for="phonenumber" value='@ViewData["phonenumber"]' />
            <input type="hidden" asp-for="mail" value='@ViewData["mail"]' />
            <input type="hidden" asp-for="update" value='@ViewData["update"]'/>
            <input type="hidden" asp-for="paymentIntentid" id="paymentIntentid" />
            <input type="hidden" asp-for="calendarid" value="0" />
    </form>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
       
        const stripe = Stripe("pk_test_51OrCH42L9BZ0orkJTUr1XITGewEtSUTdFytyb0aDZU7uNbCeSsIikybjAaFAD9vR8sJGMowFAbPXDVt6SNmieQRG00KF4IreRP", {
            locale: 'ja'
        });

        initialize();
        checkStatus();

        // Create a Checkout Session as soon as the page loads
        async function initialize() {
            const response = await fetch("/Home/Checkout", {
                method: "POST",
                    headers: {
                        'Content-Type': 'application/json'  // Add the Content-Type header
                    },
                    body: JSON.stringify(@ViewData["price"])
            });

            const { clientSecret } = await response.json();

            const appearance = {
                theme: 'stripe',
            };
            elements = stripe.elements({ appearance, clientSecret });

            const paymentElementOptions = {
                layout: "tabs",
            };

            const paymentElement = elements.create("payment", paymentElementOptions);
            paymentElement.mount("#payment-element");
        }

        async function handleSubmit(e) {
            e.preventDefault();
                const { error, paymentIntent } = await stripe.confirmPayment({
                    elements,
                    confirmParams: {
                        return_url: "https://localhost:44330/Home/verify",
                    },
                    redirect: "if_required",
                });
      
            // This point will only be reached if there is an immediate error when
            // confirming the payment. Otherwise, your customer will be redirected to
            // your `return_url`. For some payment methods like iDEAL, your customer will
            // be redirected to an intermediate site first to authorize the payment, then
            // redirected to the `return_url`.
                if (error) {
                    if (error.type === "card_error" || error.type === "validation_error") {
                        showMessage(error.message);
                    } else {
                        showMessage("An unexpected error occurred.");
                    }
                } else {
                    // Payment was successful
                    showMessage("Payment successful!");
                    // You can access the paymentIntent object for further details
                    const paymentIntentId = paymentIntent.id;
                    // Set the value of the element with ID "paymentIntentid"
                    document.getElementById("paymentIntentid").value = paymentIntentId;
                    document.getElementById("submitbtn").submit();
                }
        }

        // Fetches the payment intent status after payment submission
        async function checkStatus() {
            const clientSecret = new URLSearchParams(window.location.search).get(
                "payment_intent_client_secret"
            );

            if (!clientSecret) {
                return;
            }

            const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
                
            switch (paymentIntent.status) {
                case "succeeded":
                    slack();
                        async function slack() {
                            const slack = await fetch("/Home/Create", {
                                method: "GET",
                                 headers: {
                            'Content-Type': 'application/json'  // Add the Content-Type header
                        },
                                body: JSON.stringify(@ViewData["price"])
                            });

                        }
                    break;
                case "processing":
                    showMessage("Your payment is processing.");
                    break;
                case "requires_payment_method":
                    showMessage("Your payment was not successful, please try again.");
                    break;
                default:
                    showMessage("Something went wrong.");
                    break;
            }
      
        }
           
        function showMessage(messageText) {
            const messageContainer = document.querySelector("#payment-message");

            messageContainer.classList.remove("hidden");
            messageContainer.textContent = messageText;

            setTimeout(function () {
                messageContainer.classList.add("hidden");
                messageContainer.textContent = "";
            }, 4000);
        }

        // Show a spinner on payment submission
        function setLoading(isLoading) {
            if (isLoading) {
                // Disable the button and show a spinner
                document.querySelector("#submit").disabled = true;
                document.querySelector("#spinner").classList.remove("hidden");
                document.querySelector("#button-text").classList.add("hidden");
            } else {
                document.querySelector("#submit").disabled = false;
                document.querySelector("#spinner").classList.add("hidden");
                document.querySelector("#button-text").classList.remove("hidden");
            }
        }

        document.getElementById("payment-form").addEventListener("submit", handleSubmit);
    </script>
    <div id="checkout">
        <!-- Checkout will insert the payment form here -->
    </div>
    </div>
</div>